/*
    - Viết chương trình tạo xung với tần số 1hz D18
    - Dùng chân D2 để đếm xung
        + Đếm tới 5 thì set chân D19 lên 1: PCNT_EVT_THRES_1
        + Đếm tới 10 thì reset chân D19 về 0: PCNT_EVT_THRES_0
        + Đếm tới 20 thì reset số xung về 0 : PCNT_EVT_H_LIM
        + Đếm lui hơn 0 thì vẫn giữ ở 0
    - Dùng chân D4 để điều khiển
        + Nếu D4 nối nguồn thì đảo chiều đếm
        + Nếu D4 nối đất thì giữ chiều đếm
    - Dùng chân D15 để điều khiển chân 18 
        + Nếu D15 nối nguồn thì set D23 lên 1
        + Nếu D15 nối đất thì reset D23 về 0
    - Dùng chân 22 
        + kích chân 22 để set chân 12 lên mức 1
        + kích chân 23 để reset chân 12 về mức 0
*/   

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/portmacro.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "driver/periph_ctrl.h"
#include "driver/ledc.h"
#include "driver/gpio.h"
#include "driver/pcnt.h"
#include "esp_attr.h"
#include "esp_log.h"

#define GPIO_OUTPUT_IO_12    12
#define GPIO_OUTPUT_IO_13    13
#define GPIO_OUTPUT_PIN_SEL  ((1ULL<<GPIO_OUTPUT_IO_12) | (1ULL<<GPIO_OUTPUT_IO_13))
#define GPIO_INPUT_IO_22     22
#define GPIO_INPUT_IO_23      23
#define GPIO_INPUT_PIN_SEL  ((1ULL<<GPIO_INPUT_IO_22) | (1ULL<<GPIO_INPUT_IO_23))

#define ESP_INTR_FLAG_DEFAULT 0

// CẤU HÌNH  CHÂN ĐẾM XUNG 
#define PCNT_TEST_UNIT      PCNT_UNIT_0
#define PCNT_H_LIM_VAL      15
#define PCNT_L_LIM_VAL      -1
#define PCNT_THRESH1_VAL    5
#define PCNT_THRESH0_VAL    10
#define PCNT_INPUT_SIG_IO   2  // Pulse Input GPIO
#define PCNT_INPUT_CTRL_IO  4  // Control GPIO HIGH=count up, LOW=count down
#define LEDC_OUTPUT_IO      18 // Output GPIO of a sample 1 Hz pulse generator



static xQueueHandle gpio_evt_queue = NULL;
xQueueHandle pcnt_evt_queue;   // A queue to handle pulse counter events
pcnt_isr_handle_t user_isr_handle = NULL; //user's ISR service handle

// A sample structure to pass events from the PCNT
// interrupt handler to the main program.

typedef struct {
    int unit;  // the PCNT unit that originated an interrupt
    uint32_t status; // information on the event type that caused the interrupt
} pcnt_evt_t;

// trình phục vụ ngắt gpio
static void IRAM_ATTR gpio_isr_handler(void* arg)
{   
    uint32_t gpio_num = (uint32_t) arg;
    xQueueSendFromISR(gpio_evt_queue, &gpio_num, NULL);
}



static void gpio_task_example(void* arg)
{
    uint32_t io_num;
    for(;;) {
        if(xQueueReceive(gpio_evt_queue, &io_num, portMAX_DELAY)) {
            printf("GPIO[%d] intr, val: %d\n", io_num, gpio_get_level(io_num));
            if (io_num == 22){
                gpio_set_level(GPIO_OUTPUT_IO_12 , 1);
            }
            if (io_num == 23){
                gpio_set_level(GPIO_OUTPUT_IO_12 , 0);
            }            
        }
    }
}

// Decode what PCNT's unit originated an interrupt
// and pass this information together with the event type
// the main program using a queue.
 
static void IRAM_ATTR pcnt_example_intr_handler(void *arg)
{
    uint32_t intr_status = PCNT.int_st.val;
    int i;
    pcnt_evt_t evt;
    portBASE_TYPE HPTaskAwoken = pdFALSE;

    for (i = 0; i < PCNT_UNIT_MAX; i++) {
        if (intr_status & (BIT(i))) {
            evt.unit = i;
            // Save the PCNT event type that caused an interrupt
            // to pass it to the main program
            evt.status = PCNT.status_unit[i].val;
            PCNT.int_clr.val = BIT(i);
            xQueueSendFromISR(pcnt_evt_queue, &evt, &HPTaskAwoken);
            if (HPTaskAwoken == pdTRUE) {
                portYIELD_FROM_ISR();
            }
        }
    }
}

// Configure LED PWM Controller
// to output sample pulses at 1 Hz with duty of about 10%

static void ledc_init(void)
{
    // Prepare and then apply the LEDC PWM timer configuration
    ledc_timer_config_t ledc_timer;
    ledc_timer.speed_mode       = LEDC_LOW_SPEED_MODE;
    ledc_timer.timer_num        = LEDC_TIMER_1;
    ledc_timer.duty_resolution  = LEDC_TIMER_10_BIT;
    ledc_timer.freq_hz          = 1;  // set output frequency at 1 Hz
    ledc_timer.clk_cfg = LEDC_AUTO_CLK;
    ledc_timer_config(&ledc_timer);

    // Prepare and then apply the LEDC PWM channel configuration
    ledc_channel_config_t ledc_channel;
    ledc_channel.speed_mode = LEDC_LOW_SPEED_MODE;
    ledc_channel.channel    = LEDC_CHANNEL_1;
    ledc_channel.timer_sel  = LEDC_TIMER_1;
    ledc_channel.intr_type  = LEDC_INTR_DISABLE;
    ledc_channel.gpio_num   = LEDC_OUTPUT_IO;
    ledc_channel.duty       = 100; // set duty at about 10%
    ledc_channel.hpoint     = 0;
    ledc_channel_config(&ledc_channel);
}

// Initialize PCNT functions:
//  - configure and initialize PCNT
//  - set up the input filter
//  - set up the counter events to watch

static void pcnt_example_init(void)
{
    // Prepare configuration for the PCNT unit 
    pcnt_config_t pcnt_config = {
        // Set PCNT input signal and control GPIOs
        .pulse_gpio_num = PCNT_INPUT_SIG_IO,
        .ctrl_gpio_num = PCNT_INPUT_CTRL_IO,
        .channel = PCNT_CHANNEL_0,
        .unit = PCNT_TEST_UNIT,
        // What to do on the positive / negative edge of pulse input?
        .pos_mode = PCNT_COUNT_INC,   // Count up on the positive edge
        .neg_mode = PCNT_COUNT_DIS,   // Keep the counter value on the negative edge
        // What to do when control input is low or high?
        .lctrl_mode = PCNT_MODE_REVERSE, // Reverse counting direction if low
        .hctrl_mode = PCNT_MODE_KEEP,    // Keep the primary counter mode if high
        // Set the maximum and minimum limit values to watch
        .counter_h_lim = PCNT_H_LIM_VAL,
        .counter_l_lim = PCNT_L_LIM_VAL,
    };
    // Initialize PCNT unit 
    pcnt_unit_config(&pcnt_config);

    // Configure and enable the input filter 
    pcnt_set_filter_value(PCNT_TEST_UNIT, 100);
    pcnt_filter_enable(PCNT_TEST_UNIT);

    // Set threshold 0 and 1 values and enable events to watch 
    pcnt_set_event_value(PCNT_TEST_UNIT, PCNT_EVT_THRES_1, PCNT_THRESH1_VAL);
    pcnt_event_enable(PCNT_TEST_UNIT, PCNT_EVT_THRES_1);
    pcnt_set_event_value(PCNT_TEST_UNIT, PCNT_EVT_THRES_0, PCNT_THRESH0_VAL);
    pcnt_event_enable(PCNT_TEST_UNIT, PCNT_EVT_THRES_0);
    // Enable events on zero, maximum and minimum limit values 
    pcnt_event_enable(PCNT_TEST_UNIT, PCNT_EVT_ZERO);
    pcnt_event_enable(PCNT_TEST_UNIT, PCNT_EVT_H_LIM);
    pcnt_event_enable(PCNT_TEST_UNIT, PCNT_EVT_L_LIM);

    // Initialize PCNT's counter 
    pcnt_counter_pause(PCNT_TEST_UNIT);
    pcnt_counter_clear(PCNT_TEST_UNIT);

    // Register ISR handler and enable interrupts for PCNT unit 
    pcnt_isr_register(pcnt_example_intr_handler, NULL, 0, &user_isr_handle);
    pcnt_intr_enable(PCNT_TEST_UNIT);

    // Everything is set up, now go to counting 
    pcnt_counter_resume(PCNT_TEST_UNIT);
}

//task này dùng để đếm xug vầ xem có sự kiện nào đang diễn ra
void pulse_counting()
{
    int16_t count = 0;
    pcnt_evt_t evt;
    portBASE_TYPE res;
    while (1) {
        // Wait for the event information passed from PCNT's interrupt handler.
        // Once received, decode the event type and print it on the serial monitor.
         
        res = xQueueReceive(pcnt_evt_queue, &evt, 1000 / portTICK_PERIOD_MS);
        if (res == pdTRUE) {
            pcnt_get_counter_value(PCNT_TEST_UNIT, &count);
            ESP_LOGI("esp_log","Event PCNT unit[%d]; cnt: %d\n", evt.unit, count);
            if (evt.status & PCNT_EVT_THRES_1) {
                ESP_LOGI("esp_log","THRES1 EVT\n");
                ESP_LOGI("esp_log","Bật chân D13\n");
                gpio_set_level(GPIO_OUTPUT_IO_13, 1);
            }
            if (evt.status & PCNT_EVT_THRES_0) {
                ESP_LOGI("esp_log","THRES0 EVT\n");
                ESP_LOGI("esp_log","Tắt chân D13\n");
                gpio_set_level(GPIO_OUTPUT_IO_13, 0);
            }
            if (evt.status & PCNT_EVT_L_LIM) {
                ESP_LOGI("esp_log","L_LIM EVT\n");
            }
            if (evt.status & PCNT_EVT_H_LIM) {
                ESP_LOGI("esp_log","H_LIM EVT\n");
                ESP_LOGI("esp_log","Reset bộ đếm về 0\n");
            }
            if (evt.status & PCNT_EVT_ZERO) {
                ESP_LOGI("esp_log","ZERO EVT\n");
            }
        } else {
            pcnt_get_counter_value(PCNT_TEST_UNIT, &count);
            ESP_LOGI("esp_log","Current counter value :%d\n", count);
        }
    }
    if(user_isr_handle) {
        //Free the ISR service handle.
        esp_intr_free(user_isr_handle);
        user_isr_handle = NULL;
    }
}

// cấu hình chân input 15
void gpio_D22_D23_setup()
{
    

    gpio_config_t io_conf;
    //disable interrupt
    io_conf.intr_type = GPIO_PIN_INTR_DISABLE;
    //set as output mode
    io_conf.mode = GPIO_MODE_OUTPUT;
    //bit mask of the pins that you want to set,e.g.GPIO18/19
    io_conf.pin_bit_mask = GPIO_OUTPUT_PIN_SEL;
    //disable pull-down mode
    io_conf.pull_down_en = 0;
    //disable pull-up mode
    io_conf.pull_up_en = 0;
    //configure GPIO with the given settings
    gpio_config(&io_conf);

    //interrupt of rising edge
    io_conf.intr_type = GPIO_PIN_INTR_POSEDGE;
    //bit mask of the pins, use GPIO4/5 here
    io_conf.pin_bit_mask = GPIO_INPUT_PIN_SEL;
    //set as input mode    
    io_conf.mode = GPIO_MODE_INPUT;
    //enable pull-up mode
    io_conf.pull_up_en = 1;
    gpio_config(&io_conf);


    //create a queue to handle gpio event from isr
    gpio_evt_queue = xQueueCreate(10, sizeof(uint32_t));

    //install gpio isr service
    gpio_install_isr_service(ESP_INTR_FLAG_DEFAULT);
    //hook isr handler for specific gpio pin
    gpio_isr_handler_add(GPIO_INPUT_IO_22, gpio_isr_handler, (void*) GPIO_INPUT_IO_22);
    //hook isr handler for specific gpio pin
    gpio_isr_handler_add(GPIO_INPUT_IO_23, gpio_isr_handler, (void*) GPIO_INPUT_IO_23);


}





void app_main(void)
{
    int temp = 0;

    // Initialize LEDC to generate sample pulse signal 
    ledc_init();

    // Initialize PCNT event queue and PCNT functions 
    pcnt_evt_queue = xQueueCreate(10, sizeof(pcnt_evt_t));
    pcnt_example_init();

    //hàm để cấu hình chân input gpio D15
    gpio_D22_D23_setup();


    // Tạo một task để đếm xung 
    xTaskCreate(pulse_counting, "task này dùng để đếm xug vầ xem có sự kiện nào đang diễn ra", 4096, NULL, 5, NULL);

    //start gpio task
    xTaskCreate(gpio_task_example, "gpio_task_example", 2048, NULL, 10, NULL);
}
